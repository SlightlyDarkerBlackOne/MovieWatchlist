// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieWatchlist.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MovieWatchlist.Infrastructure.Migrations
{
    [DbContext(typeof(MovieWatchlistDbContext))]
    [Migration("20251007164733_AddPasswordResetToken")]
    partial class AddPasswordResetToken
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MovieWatchlist.Core.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("When this movie was added to our database");

                    b.Property<string>("Genres")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Movie genres as JSON array");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasComment("Movie plot summary");

                    b.Property<double>("Popularity")
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Popularity score from TMDB");

                    b.Property<string>("PosterPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("Path to movie poster image");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Movie release date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("Movie title");

                    b.Property<int>("TmdbId")
                        .HasColumnType("integer")
                        .HasComment("The Movie Database ID");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Last time movie data was updated");

                    b.Property<double>("VoteAverage")
                        .HasColumnType("decimal(3,1)")
                        .HasComment("Average user rating from TMDB");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer")
                        .HasComment("Number of votes on TMDB");

                    b.HasKey("Id");

                    b.HasIndex("ReleaseDate")
                        .HasDatabaseName("IX_Movies_ReleaseDate");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_Movies_Title");

                    b.HasIndex("TmdbId")
                        .IsUnique()
                        .HasDatabaseName("IX_Movies_TmdbId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieWatchlist.Core.Models.PasswordResetToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId", "IsUsed");

                    b.ToTable("PasswordResetTokens");
                });

            modelBuilder.Entity("MovieWatchlist.Core.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("When this token was created");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("When this refresh token expires");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("Whether this token has been revoked");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("The refresh token string");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasComment("Reference to the user who owns this refresh token");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_RefreshTokens_ExpiresAt");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("IX_RefreshTokens_Token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_RefreshTokens_UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("MovieWatchlist.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("When the user account was created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("User's email address");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Last successful login timestamp");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("Hashed password using PBKDF2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Unique username for the user");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MovieWatchlist.Core.Models.WatchlistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("When this movie was added to the watchlist");

                    b.Property<bool>("IsFavorite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("Whether this movie is marked as favorite");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasComment("Reference to the movie");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasComment("User's personal notes about the movie");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Current status of the movie in user's watchlist");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasComment("Reference to the user who owns this watchlist item");

                    b.Property<int?>("UserRating")
                        .HasColumnType("integer")
                        .HasComment("User's personal rating (1-10)");

                    b.Property<DateTime?>("WatchedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("When the user marked this movie as watched");

                    b.HasKey("Id");

                    b.HasIndex("AddedDate")
                        .HasDatabaseName("IX_WatchlistItems_AddedDate");

                    b.HasIndex("MovieId")
                        .HasDatabaseName("IX_WatchlistItems_MovieId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_WatchlistItems_Status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_WatchlistItems_UserId");

                    b.HasIndex("UserId", "MovieId")
                        .IsUnique()
                        .HasDatabaseName("IX_WatchlistItems_UserId_MovieId");

                    b.ToTable("WatchlistItems", t =>
                        {
                            t.HasCheckConstraint("CK_WatchlistItems_UserRating", "\"UserRating\" IS NULL OR (\"UserRating\" >= 1 AND \"UserRating\" <= 10)");
                        });
                });

            modelBuilder.Entity("MovieWatchlist.Core.Models.PasswordResetToken", b =>
                {
                    b.HasOne("MovieWatchlist.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieWatchlist.Core.Models.RefreshToken", b =>
                {
                    b.HasOne("MovieWatchlist.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieWatchlist.Core.Models.WatchlistItem", b =>
                {
                    b.HasOne("MovieWatchlist.Core.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MovieWatchlist.Core.Models.User", null)
                        .WithMany("WatchlistItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieWatchlist.Core.Models.User", b =>
                {
                    b.Navigation("WatchlistItems");
                });
#pragma warning restore 612, 618
        }
    }
}
